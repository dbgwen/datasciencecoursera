## Machine Learning

Who uses machine learning? Local gov, Google, Amazon, Insurance companies, universities 

  Study Design: training vs test sets
  Conceptual issues: out of sample erros, ROC curves

ML Process 
    Research question -> Input Data -> Features -> algorithm -> parameters -> evaluation 
    
    The combo of some data and an aching desire for an answer does not ensure a reasonable answer can be extracted (Research Question) 
    
    Garbage In = Garbage Out (Input Data)
      The quality of data put into the model will be the quality of prediction provided
      Depends on what is considered a good prediction
      More data > better models
      Collect the right data for the questionyou are trying to answer
    
    The features of the data are important
      Automate with care when looking at the features of the data
      
     Algorithms are not as important as the quality of data
     
     The best ML Method
        Interpretable - decision tress can be easier to understand in a clinical setting; purpose of algorithm
        Simple
        Accurate
        Fast
        Scalable - can the algorithm be easilyimplemented? Need it to be scalable
        
      
      In Sample and Out of Sample Errors
      
      In Sample Errors (Resubstitution): the error rate you get on the same data set you used to build your predictor
      Out of Sample Errors (generalization error): the error rate you get on a new data set 
          
          Key ideas
              Out of Sample errors are what you care about
              In Sample Errors < Out of Sample Errors
              The reason is overfitting - matching your algorithm to the data you have
              
       Prediction Study Design
            Define Erro Rate
            Split Data into - training, teasting, validation
            Trainig set - pick features and prediction function that are most important (use cross-validation)
            If no validation - apply to test set 1x
            If Validation set - apply test set and refine, apply 1x to validation set
            
            There is one data set (validation) that is held out and is applied once
            Know your becnhmarks 
            Avoid small sample sizes - test sets should be large
            
          Rules of Thumb for Prediciton Study Design
            1. Sample Size
                Large Sample Size
                    60% training 
                    20% test 
                    20% validation 
                 Medium Sample Size
                    60% training
                    40% test
                 Small sample size
                     Do cross-validation
                     Report caveat for small sample size
             2. Principles
                 Set the test/validation set aside and don't look at it
                 Randomly sample training and test sets
                 You data sets must reflect structure of the problem - if predicitons evolve with time split train/test in time chunks
                 All subsets should reflect as much diversity as possible - random assignment, balance features
           
           Types of Errors
            Sensitivity/Specificity/PPV/NPV - Binary Outcomes
                Positive = identified, Negative = rejects
                True Postivie = correctly identified
                False Positive = incorrectly identified
                True Negative = correctly rejected
                False Negative = incorrectly rejected
           
              Mean Squared Error - Continuous Outcomes
                  MSE = average of square((prediction - truth))
                  Root MSE = sqrt(MSE)
                
              Common Error Measures
                  MSE or Root MSE - continuous data, sensitivie to outliers
                  Median absolut deviation - continuous data, more robust (median of distance between observed and truth)
                  Sensitivity - if you care about missing positives
                  Specificity - if you care about missing negatives
                  Accuracy - weighs FP and FN equal
                  Concordance - Kappa
                
               ROC Curves - measures the quality of the goodness of fit
                  In binary classification you are predicting one of two categories
                  Probability of an outcome
                  The cutoff you choose gives different results
                  The area under the curve (AUC)
                      0.50 = 50/50 chance, not better than guessing
                      < 0.50 = worse than guessing
                      1.00 = prefect classifier
                      > 0.80 = Good
                      
               Cross Validation
                  Take a dataset and break up into training and test dataset
                  Accuracy on training set is optimistic and may not be accurate to a new sample
                  Indepdent data set is better at testing the accuracy
                  Build model using training set and use test set only once
                 Approach
                    Use training set -> split into training/test set -> build a model on training set -> evaluate with test set -> repeat and average the estimated errors
                    Good for picking: 
                        Variables to include in model
                        Type of prediction function to use
                        Parameters in prediciton function
                        Compare different predictors
                      Original test set is never used since the training set is being split into two sets
                   Can also use K-fold to break up training data set into three different series of datasets - average errors across datasets
                   Leave one out - leave out a sample of the training data, and then use the training data results to assess out of sample accuracy rate
                   
                   Considerations
                      For time-series data you must do time chunks at the time
                      K-Fold validation - larger k = less bias, more variance / small k = more bias, less variance
                      Random sampling must be done without replacement
                      Random sampling with replacement should use boostrapping
                          underestimate error and can be corrected, but its complicated (.632 bootstrap)
                       If you cross-validate to pick predictors, must estimate errors on independent dataset 
                       
                    What dataset should you use?
                       Data properties is important - the features of the data are important
                       Unrelated data is a common mistake - data that is not related to the outcome 
                       
                   Data Splitting
                      library(caret); library(kernlab); data(spam)
                      inTrain <‐ createDataPartition(y=spam$type,
                      p=0.75, list=FALSE)
                      training <‐ spam[inTrain,]
                      testing <‐ spam[‐inTrain,]
                      dim(training)
                    K-Fold Example
                        set.seed(32323)
                        folds <‐ createFolds(y=spam$type,k=10,
                        list=TRUE,returnTrain=TRUE)
                        sapply(folds,length)
                        Retuns Test
                          set.seed(32323)
                          folds <‐ createFolds(y=spam$type,k=10,
                          list=TRUE,returnTrain=FALSE)
                          sapply(folds,length)
                         Resampling
                           set.seed(32323)
                           folds <‐ createResample(y=spam$type,times=10,
                           list=TRUE)
                           sapply(folds,length)
                         Time Slices
                            set.seed(32323)
                            tme <‐ 1:1000
                            folds <‐ createTimeSlices(y=tme,initialWindow=20,
                            horizon=10)
                            names(folds)
                    Plotting Predictions
                      library(ISLR); library(ggplot2); library(caret);
                      data(Wage)
                      summary(Wage)
                      
                      Getting/Training Dataset
                          inTrain <‐ createDataPartition(y=Wage$wage,
                                                              p=0.7, list=FALSE)
                          training <‐ Wage[inTrain,]
                          testing <‐ Wage[‐inTrain,]
                          dim(training); dim(testing)
                       featurePlot in Caret Package
                          featurePlot(x=training[,c("age","education","jobclass")],
                                                                  y = training$wage,
                          plot="pairs")
                       qplot with ggplot2 package
                          qplot(age,wage,data=training)
                          qplot(age,wage,colour=jobclass,data=training)
                          qq <‐ qplot(age,wage,colour=education,data=training)
                          qq + geom_smooth(method='lm',formula=y~x)
                          qplot(wage,colour=education,data=training,geom="density")
                          
                        cut2 (making factors) with hismc package
                            cutWage <‐ cut2(training$wage,g=3)
                            table(cutWage)
                            p1 <‐ qplot(cutWage,age, data=training,fill=cutWage, geom=c("boxplot"))
                            p2 <‐ qplot(cutWage,age, data=training,fill=cutWage, geom=c("boxplot","jitter")) grid.arrange(p1,p2,ncol=2)
                            t1 <‐ table(cutWage,training$jobclass)
                            
                     Covariate creation
                          Level 1: raw data to covariate
                          Level 2: transforming tidy covariates
                                  library(kernlab);data(spam)
                                  spam$capitalAveSq <‐ spam$capitalAve^2
                            Adding Dummy Variables
                              dummies <‐ dummyVars(wage ~ jobclass,data=training)
                              head(predict(dummies,newdata=training))
                            Removing zero covariates
                              nsv <‐ nearZeroVar(training,saveMetrics=TRUE)
                            Splines
                              library(splines)
                              bsBasis <‐ bs(training$age,df=3)
                              lm1 <‐ lm(wage ~ bsBasis,data=training)
                              plot(training$age,training$wage,pch=19,cex=0.5)
                              points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
                       
                       Preprocessing - Correlated Predictors and Principal Components Analysis
                            library(caret); library(kernlab); data(spam)
                            inTrain <‐ createDataPartition(y=spam$type,
                                                          p=0.75, list=FALSE)
                            training <‐ spam[inTrain,]
                            testing <‐ spam[‐inTrain,]
                            M <‐ abs(cor(training[,‐58]))
                            diag(M) <‐ 0
                            which(M > 0.8,arr.ind=T)
                            plot(spam[,34],spam[,32])
                         Basic Idea Behind PCA
                          We might not need every predictor
                          A weighted combination of predictors might be better
                          We should pick this combination to capture the "most information" possible
                              Reduced number of predictors
                              Reduced noise (due to averaging)
                              
                          Rotate the PLot
                            X <‐ 0.71*training$num415 + 0.71*training$num857
                            Y <‐ 0.71*training$num415 ‐ 0.71*training$num857
                            plot(X,Y)
                          R prcomp
                            smallSpam <‐ spam[,c(34,32)]
                            prComp <‐ prcomp(smallSpam)
                            plot(prComp$x[,1],prComp$x[,2])
                            prComp$rotation
                            typeColor <‐ ((spam$type=="spam")*1 + 1)
                            prComp <‐ prcomp(log10(spam[,‐58]+1))
                            plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
                            
                          PCA with caret paclage
                            preProc <‐ preProcess(log10(spam[,‐58]+1),method="pca",pcaComp=2)
                            spamPC <‐ predict(preProc,log10(spam[,‐58]+1))
                            plot(spamPC[,1],spamPC[,2],col=typeColor)
                          
                          Preprocessing with PCA
                            preProc <‐ preProcess(log10(training[,‐58]+1),method="pca",pcaComp=2)
                            trainPC <‐ predict(preProc,log10(training[,‐58]+1))
                            modelFit <‐ train(training$type ~ .,method="glm",data=trainPC)
                            testPC <‐ predict(preProc,log10(testing[,‐58]+1))
                            confusionMatrix(testing$type,predict(modelFit,testPC))
                       
                 Predicting with Linear Regression
                        Fit a simple regression model
                        Plug in new covariates and multiply by the coefficients
                        Useful when the linear model is (nearly) correct
                      
                      Example with Old Faithful Data
                          library(caret);data(faithful); set.seed(333)
                          inTrain <‐ createDataPartition(y=faithful$waiting,
                                                                p=0.5, list=FALSE)
                          trainFaith <‐ faithful[inTrain,]; testFaith <‐ faithful[‐inTrain,]
                          head(trainFaith)
                          plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
                          lm1 <‐ lm(eruptions ~ waiting,data=trainFaith)
                          plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
                          lines(trainFaith$waiting,lm1$fitted,lwd=3)
                          coef(lm1)[1] + coef(lm1)[2]*80 ##Predict a variable
                          newdata <‐ data.frame(waiting=80)
                          predict(lm1,newdata)
                       Plot Predictions
                          par(mfrow=c(1,2))
                          plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
                          lines(trainFaith$waiting,predict(lm1),lwd=3)
                          plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
                          lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
                          sqrt(sum((lm1$fitted‐trainFaith$eruptions)^2)) ## Calculate RMSE on test dataset
                        Prediction Intervals
                          pred1 <‐ predict(lm1,newdata=testFaith,interval="prediction")
                          ord <‐ order(testFaith$waiting)
                          plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
                          matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty = c(1,1,1), lwd=3)
                        Using caret
                          modFit <‐ train(eruptions ~ waiting,data=trainFaith,method="lm")
                          summary(modFit$finalModel)
                          
           Predicting with Linear Regression with multiple variables - Example
                library(ISLR); library(ggplot2); library(caret);
                data(Wage); Wage <‐ subset(Wage,select=‐c(logwage))
                 summary(Wage)
               Training/Test datasets
                 inTrain <‐ createDataPartition(y=Wage$wage,
                                                    p=0.7, list=FALSE)
                 training <‐ Wage[inTrain,]; testing <‐ Wage[‐inTrain,]
                 dim(training); dim(testing)
               Features Plot
                 featurePlot(x=training[,c("age","education","jobclass")],
                                                    y = training$wage,
                 plot="pairs")
                 qplot(age,wage,data=training)
                 qplot(age,wage,colour=jobclass,data=training)
                 modFit<‐ train(wage ~ age + jobclass + education,
                                            method = "lm",data=training)
                 finMod <‐ modFit$finalModel
                 print(modFit)
                 plot(finMod,1,pch=19,cex=0.5,col="#00000010")
                 plot(finMod$residuals,pch=19)
                 
                 Predicted vs truth in test set
                    pred <‐ predict(modFit, testing)
                    qplot(wage,pred,colour=year,data=testing)
                    
                 Using all variables
                    modFitAll<‐ train(wage ~ .,data=training,method="lm")
                    pred <‐ predict(modFitAll, testing)
                    qplot(wage,pred,data=testing)
           
                          
    
                  
                 
               
                
        
        
        
        
        
        
        
              
              
              
